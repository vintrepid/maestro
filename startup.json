{
  "aliases": {
    "content": "# Conversational Aliases\n\nThese are shorthand commands the user uses to trigger specific agent behaviors.\n\n## Session Management\n\n### `hi`\n**Trigger:** Session start\n**Agent should:**\n- Read AGENTS.md → startup.json\n- Load required reading (README, bootstrap.json, ALIASES.md, USER_CONTEXT.md)\n- Initialize tracking: `mix bundles.track init <project> <branch> <bundles>`\n- Check for current_task.json or ask what to work on\n- Report ready to work\n\n### `bye`\n**Trigger:** Session wrap-up\n**Agent should:**\n- Save all work and commit if appropriate\n- Run: `mix bundles.track summary`\n- Run: `mix session.capacity <tokens_used> 200000`\n- Report final capacity and summary\n- Document any learnings\n\n## Git Commands (always start with `g`)\n\n### `gpb` or `gcb`\n**Meaning:** Git push branch / Git create branch\n**Agent should:**\n- Check current branch\n- If on master/main, create feature branch first\n- Push current branch to origin\n- Confirm push successful\n\n### `merge`\n**Meaning:** User mentioning merge (not a command to execute)\n**Agent should:**\n- Discuss what needs merging\n- Ask for confirmation before doing anything\n- DO NOT merge without explicit approval\n\n**Note:** Git commands always start with `g`. If user says just \"merge\" they're discussing, not commanding.\n\n## Editor & Development\n\n### `wip`\n**Meaning:** Open Working In Progress files in editor\n**Agent should:**\n- Identify all files modified/created in current session\n- Open them in VSCodium (configured as `codium` command)\n- Use file opening mechanism from project config\n\n**Example:**\n```\nUser: wip\nAgent: Opening modified files in VSCodium...\n       - lib/maestro_web/live/hotkeys_live.ex\n       - lib/maestro_web/router.ex\n       - agents/ALIASES.md\n       ✓ 3 files opened\n```\n\n**Technical:**\n- Editor command configured in config/config.exs: `editor_command: \"codium\"`\n- Open files that have been modified this session\n- Can batch open multiple files at once\n\n## Agent Coordination\n\n### `ci`\n**Meaning:** Check-in (with another agent) - NOT a git command\n**Agent should:**\n1. Look for COMPLETION*.md files in the other project directory\n2. Read the completion report from the other agent\n3. Extract key information: what was done, status, issues, learnings\n4. Update the relevant task notes in Maestro\n5. Report back what the other agent completed\n\n**Example:**\n```\nUser: ci\nAgent: Checking in on Circle agent...\n       Found: ~/dev/circle/COMPLETION-improve-interest-form-ui.md\n       Circle completed UI improvements task:\n       - 2-column layout implemented\n       - Tag controls added\n       - All tests passing\n       - Time: 25 min (under budget)\n       \n       Updated task #15 notes with completion report.\n```\n\n**Where to look:**\n- `~/dev/<project>/COMPLETION*.md`\n- Most recent file matching pattern\n- Parse markdown for: status, time, issues, learnings\n\n**What to do with it:**\n- Copy relevant parts to task notes in Maestro\n- Update task status if mentioned\n- Flag any issues that need attention\n- Note any learnings for future tasks\n\n## Work Management\n\n### `learn`\n**Trigger:** Document learnings from current session\n**Agent should:**\n- Create or update session learnings file (agents/guides/SESSION_LEARNINGS_<date>.md)\n- Document: problems encountered, solutions found, patterns discovered\n- Update guides/templates if new patterns emerged\n- Make knowledge reusable for future sessions\n\n**Key insight:** Learning = Capturing for reuse, not just solving\n\n## Common Patterns\n\n### Git Commands Always Start with `g`\n- `gpb` / `gcb` - push/create branch\n- `gco` - checkout\n- `gst` - status\n- `merge` alone → discussion, not command\n\n### `ci` is About Coordination\n- Check-in = \"How's the other agent doing?\"\n- Look for their completion files\n- Bring their report back to Maestro\n- Update task tracking\n\n### `wip` is About Files\n- Open files I'm currently working on\n- Use VSCodium (codium command)\n- Don't confuse with \"work in progress\" save\n\n### Context Awareness\n- End of session → prepare for bye\n- Modified several files → user might say wip\n- Another agent finished → expect ci command\n- Discovered pattern → suggest learn\n\n## Anti-patterns\n\n❌ Confusing `ci` with git commit\n❌ Confusing `wip` with saving work state\n❌ Forgetting to check for COMPLETION files on `ci`\n❌ Not updating task notes after `ci`\n❌ Merging without approval\n❌ Opening wrong files on `wip` (open modified ones, not all)\n\n## Multi-Agent Workflow\n\n**Maestro assigns task to Circle:**\n1. Maestro creates task JSON in Circle directory\n2. Circle agent works on task\n3. Circle creates COMPLETION-<task-name>.md\n4. User tells Maestro: `ci`\n5. Maestro reads Circle's completion file\n6. Maestro updates task notes in own UI\n7. Coordination complete\n\n**File Pattern:**\n- Circle completes → `~/dev/circle/COMPLETION-<task>.md`\n- Maestro checks in → reads that file\n- Maestro updates → task notes in Maestro UI\n\n## Why These Exist\n\nThese aliases emerged from repeated patterns:\n- Sessions always start the same way → `hi`\n- Sessions always end the same way → `bye`\n- Need to open files in editor → `wip`\n- Agents need to coordinate → `ci`\n- Learnings need capturing → `learn`\n\nThe aliases make communication efficient and establish clear behavioral patterns across sessions.\n",
    "purpose": "Conversational shortcuts user employs (hi, bye, gpb, learn, wip, ci)"
  },
  "anti_patterns": [
    "Trying to read agents/* files (they're symlinked, causes confusion)",
    "Loading all bundles upfront",
    "Reading documentation 'just in case'",
    "Trying to memorize everything before starting",
    "Loading project READMEs you're not working with"
  ],
  "bootstrap": {
    "content": {
      "anti_patterns": [
        {
          "instead": "Always use feature branches",
          "pattern": "Committing directly to main/master",
          "why": "No review process, hard to rollback"
        },
        {
          "instead": "Only restart for deps/config/supervision changes",
          "pattern": "Restarting server for regular code changes",
          "why": "Wastes time, Phoenix reloads automatically"
        },
        {
          "instead": "Always read README first",
          "pattern": "Making changes without reading project README",
          "why": "Miss project-specific context and conventions"
        },
        {
          "instead": "Try 1-2 times, then ask user",
          "pattern": "Continuing when stuck instead of asking",
          "why": "Wastes cycles on wrong approach"
        },
        {
          "instead": "Log each guideline application with mix bundles.track",
          "pattern": "Not tracking guideline usage",
          "why": "Prevents bundle optimization"
        },
        {
          "instead": "Use 'agents/bundles/*.json' or verify with 'ls -la agents'",
          "pattern": "Looking for agents directory in wrong location",
          "why": "It's a symlink to ~/dev/agents, not a real directory"
        },
        {
          "instead": "Read startup.json which has everything bundled",
          "pattern": "Reading agents/* files at startup",
          "why": "Symlink causes confusion, content already in startup.json"
        }
      ],
      "bootstrap_workflow": {
        "new_project_session": [
          "1. Read startup.json (contains README, bootstrap, aliases bundled inline)",
          "2. DO NOT try to read agents/* files - already bundled in startup.json",
          "3. Check current git branch",
          "3. Check current git branch",
          "4. Load this bootstrap bundle for core rules",
          "5. Initialize tracking: mix bundles.track init <project> <branch> bootstrap",
          "6. Ask user what task to work on",
          "7. Load additional bundles as needed for task",
          "8. Log guideline usage throughout work",
          "9. End session: mix bundles.track summary"
        ]
      },
      "bundle": "bootstrap",
      "decision_trees": {
        "when_to_ask": [
          {
            "no": "Ask for clarification",
            "question": "Are requirements clear?",
            "yes": "next_question"
          },
          {
            "no": "next_question",
            "question": "Is this a common pattern with established solution?",
            "yes": "Proceed with implementation"
          },
          {
            "no": "Proceed with best solution",
            "question": "Are there multiple valid approaches?",
            "yes": "Ask which approach preferred"
          }
        ],
        "when_to_restart": [
          {
            "no": "next_question",
            "question": "Did you modify mix.exs dependencies?",
            "yes": "Restart with reason: deps_changed"
          },
          {
            "no": "next_question",
            "question": "Did you modify config files?",
            "yes": "Restart with reason: config_changed"
          },
          {
            "no": "Do NOT restart - Phoenix reloads automatically",
            "question": "Did you modify supervision tree?",
            "yes": "Restart with reason: supervision_tree_changed"
          }
        ]
      },
      "description": "Minimal guidelines for new projects - just the essentials",
      "includes": [
        "GUIDELINES.md (core only)",
        "AGENTS.md"
      ],
      "patterns": {
        "git_workflow": {
          "start_task": [
            "Read project README",
            "Check current branch: git branch --show-current",
            "Create feature branch: git checkout -b feature/description",
            "Log: mix bundles.track ref git_feature_branch \"Starting task\"",
            "Make changes with frequent commits",
            "Push branch: git push origin feature/description",
            "Wait for user approval before merging"
          ]
        },
        "verification_checklist": {
          "before_completing": [
            "Run tests: mix test",
            "Run precommit: mix precommit",
            "Verify UI changes in browser (if applicable)",
            "Check for errors in logs",
            "Ensure all files are committed",
            "Log: mix bundles.track summary"
          ]
        }
      },
      "quick_reference": {
        "agents_directory": {
          "access": "Both relative (agents/) and absolute (~/dev/agents/) paths work",
          "bundles": "agents/bundles/*.json",
          "location": "~/dev/agents (symlinked as ./agents)",
          "verify": "ls -la agents"
        },
        "available_bundles": {
          "bootstrap": "Core guidelines (you're reading this)",
          "database_work": "Ash resources, migrations, polymorphic relations",
          "dev_auth_bypass": "Development auth bypass for Ash Authentication",
          "navbar_setup": "Complete navbar setup with logo and user menu",
          "ui_work": "LiveView, DaisyUI, Phoenix components"
        },
        "common_commands": {
          "migrate": "mix ecto.migrate",
          "precommit": "mix precommit",
          "reset_db": "mix ecto.reset",
          "server": "mix phx.server",
          "test": "mix test"
        },
        "restart_reasons": [
          "deps_changed",
          "config_changed",
          "supervision_tree_changed"
        ],
        "startup_process": {
          "bundled_content": [
            "README",
            "bootstrap guidelines",
            "aliases",
            "workflow"
          ],
          "never_read": [
            "agents/bundles/*.json",
            "agents/ALIASES.md",
            "README.md separately"
          ],
          "read": "startup.json only",
          "rebuild_command": "mix startup.build"
        },
        "tracking_commands": {
          "end_session": "mix bundles.track summary",
          "log_usage": "mix bundles.track ref <guideline_id> \"context\""
        }
      },
      "rules": [
        {
          "category": "meta",
          "context": "All projects share the same agents directory via symlink",
          "examples": {
            "access_bundles": [
              "cat agents/bundles/bootstrap.json",
              "File.read!(\"agents/bundles/bootstrap.json\")",
              "cat ~/dev/agents/bundles/bootstrap.json"
            ],
            "reads_as": "agents -> /Users/vince/dev/agents",
            "verify_symlink": "ls -la agents"
          },
          "id": "agents_directory_location",
          "pattern": {
            "absolute_path": "~/dev/agents/bundles/*.json",
            "both_work": "Use either relative or absolute paths",
            "relative_path": "agents/bundles/*.json"
          },
          "priority": "critical",
          "rule": "The agents directory is a symlink to ~/dev/agents"
        },
        {
          "category": "meta",
          "context": "Never try to read agents/* files at startup - everything is already in startup.json",
          "examples": {
            "correct_startup": [
              "Read startup.json (has README, bootstrap, aliases bundled)",
              "Access content via: startup[\"readme\"][\"content\"]",
              "Access bootstrap via: startup[\"bootstrap\"][\"content\"]"
            ],
            "incorrect_startup": [
              "Read README.md separately",
              "Try to read agents/bundles/bootstrap.json",
              "Try to read agents/ALIASES.md"
            ]
          },
          "id": "startup_json_bundled",
          "pattern": {
            "end_of_session": "Always run: mix startup.build",
            "next_session_gets": "Fully bundled startup.json with all content",
            "workflow_step": "Step 7 in workflow: mix startup.build"
          },
          "priority": "critical",
          "rationale": "Avoids symlink confusion and failed file reads",
          "rule": "startup.json contains all startup content bundled inline"
        },
        {
          "category": "meta",
          "context": "Log when you actively apply a guideline, not just read it. This data improves bundle optimization.",
          "examples": {
            "good": [
              "mix bundles.track ref git_feature_branch \"Creating feature branch for user profiles\"",
              "mix bundles.track ref daisyui_philosophy \"Choosing semantic button classes\""
            ]
          },
          "id": "usage_tracking",
          "pattern": "mix bundles.track ref <guideline_id> \"<context>\"",
          "priority": "high",
          "rule": "Log guideline usage for optimization"
        },
        {
          "category": "git",
          "examples": {
            "bad": "git commit -m 'add feature' (on main)",
            "good": "git checkout -b feature/user-profiles"
          },
          "id": "git_feature_branch",
          "priority": "critical",
          "rule": "Always work on feature branches, never on master/main"
        },
        {
          "category": "git",
          "context": "Explain 'why' not just 'what'",
          "id": "git_commit_frequently",
          "priority": "high",
          "rule": "Make frequent commits with clear messages"
        },
        {
          "category": "git",
          "id": "git_never_merge",
          "priority": "critical",
          "rule": "Never merge without user approval"
        },
        {
          "category": "git",
          "id": "git_never_delete_branches",
          "priority": "critical",
          "rule": "Never delete branches without approval"
        },
        {
          "category": "verification",
          "context": "If available in project",
          "id": "verify_before_complete",
          "priority": "high",
          "rule": "Run mix precommit before marking work complete"
        },
        {
          "category": "verification",
          "id": "test_appropriately",
          "priority": "high",
          "rule": "Test changes appropriately (code tests, UI verification)"
        },
        {
          "category": "communication",
          "context": "Don't waste cycles guessing",
          "id": "ask_when_stuck",
          "priority": "high",
          "rule": "Take 1-2 fix attempts, then ask user if stuck"
        },
        {
          "category": "communication",
          "context": "No unnecessary preamble or postamble",
          "id": "concise_responses",
          "priority": "medium",
          "rule": "Keep responses concise (1-3 sentences when possible)"
        },
        {
          "category": "communication",
          "id": "ask_vs_proceed",
          "priority": "high",
          "rule": "Ask when requirements unclear, proceed when clear"
        },
        {
          "category": "code_quality",
          "context": "Avoid :httpoison, :tesla, :httpc",
          "id": "use_req_library",
          "priority": "medium",
          "rule": "Use :req library for HTTP requests"
        },
        {
          "category": "code_quality",
          "id": "daisyui_for_components",
          "priority": "high",
          "rule": "Use DaisyUI for components, Tailwind for layout"
        },
        {
          "category": "code_quality",
          "context": "Only restart for: deps_changed, config_changed, supervision_tree_changed",
          "id": "never_restart_unnecessarily",
          "priority": "high",
          "rule": "Never restart server for regular changes (Phoenix reloads automatically)"
        }
      ],
      "usage_tracking": {
        "enabled": true,
        "instructions": "When you apply a guideline during work, log it immediately using: `mix bundles.track ref <guideline_id> \"<brief context>\"`. This helps optimize future sessions."
      },
      "version": "1.5.0"
    },
    "purpose": "Minimal core rules - git workflow, verification, tracking"
  },
  "description": "Startup configuration for Maestro AI sessions - all content bundled",
  "generated_at": "2025-10-28T20:33:46.451360Z",
  "philosophy": "Load less, reference more. Read what you need when you need it. Everything you need to start is in this file.",
  "readme": {
    "content": "# Maestro\n\nProject orchestration and agent coordination hub.\n\n## Project Tasks\n\n### Current: Agent Startup Optimization\n\n**The Problem:** AI agents spend enormous amounts of time, money, and tokens loading all guidelines at session start. We need to solve this by loading only what's needed for specific tasks.\n\n**The Solution:**\n- **Maestro** (this project): Reads entire `agents/` directory to have full context for coordinating work\n- **Other projects**: Load minimal essential guidelines at startup\n- **Task-specific loading**: When we assign a task to another project, Maestro tells them exactly what guidelines they need to read\n- **Usage tracking**: Track which guidelines agents actually reference during work to optimize future sessions\n\n**How it works:**\n1. Maestro plans tasks for other projects here\n2. Maestro writes the task with specific reading requirements to the project's CHANGELOG\n3. That project's agent starts up, reads minimal guidelines + task-specific ones\n4. Agent logs which guidelines were actually used (server log style)\n5. We analyze logs to optimize what to load by default\n\n**Current status:**\n- ✅ Maestro reads everything (agents/ directory)\n- ✅ Other project startup files created (minimal loading)\n- ⚠️ GUIDELINE_USAGE_TRACKER exists but not being used as intended\n- 🔄 Need to implement usage logging (agent-oriented, like server logs)\n- 🔄 Need to test with other projects loading minimal set\n\n### Completed: CSS Linter Integration\n\n**Branch:** feature/css-linter\n\n**Goal:** Move Tailwind analysis UI from Maestro to css_linter tool, making it reusable across all projects.\n\n**Status:** ✅ Working, needs migration for full functionality\n\n**What was done:**\n- Copied TailwindAnalysisLive to css_linter package\n- Refactored to be repo-agnostic and mountable from any app\n- Added LiveTable dependency to css_linter\n- Configured and mounted in Maestro (separate scope to avoid namespace collision)\n\n**Remaining:**\n- Run migration for css_class_usage table\n- Test UI functionality\n- Remove old Maestro-specific analysis files\n- Document web UI usage in css_linter\n\n### Access Points\n\n- **Web App**: http://localhost:4004\n- **Live Debugger**: http://localhost:4012\n\n## Orchestration Features\n\nCurrent features:\n- **Project Dashboard**: View status of all projects\n- **Real-time Monitoring**: Track which projects are running (ProjectMonitor GenServer checks TCP ports every 10s)\n- **Guideline Browser**: Visual tree of all agent guidelines\n- **LiveTable Integration**: Uses vintrepid/live_table fork with DaisyUI styling\n\nPlanned features:\n- **Task Planning**: Create and assign tasks to other projects\n- **Usage Analytics**: Track which guidelines are actually referenced\n- **Smart Loading**: Recommend minimal guideline set based on task type\n- **Multi-Project Commands**: Start/stop multiple projects\n- **Log Aggregation**: View logs from all projects\n- **Environment Management**: Manage .env files across projects\n\n## Technical Details\n\n### Project Monitoring\n- ProjectMonitor GenServer checks TCP ports every 10s\n- LiveView updates UI every 5s\n- Real-time status indicators (green=running, red=stopped)\n\n### Dashboard\n- Uses LiveTable component from vintrepid/live_table fork\n- DaisyUI styling with table-pin-rows for fixed headers\n- Sortable and searchable project listing\n\n### Guideline Browser\n- Visual tree view of entire agents directory\n- Helps agents understand available documentation\n- Checkbox tracking (UI-only, not persisted)\n\n### Database\n- Uses Ash Framework with PostgreSQL\n- Ecto for css_linter integration (Ash not compatible with LiveTable)\n- Seeds include 6 projects: Ready, Calvin, SanJuan, new_project, Maestro, np\n\n## Development Setup\n\n### Prerequisites\n\n- Elixir 1.18.3\n- PostgreSQL running at localhost\n- Erlang/OTP 27\n\n### Getting Started\n\n```bash\ncd ~/dev/maestro\nsource .env\nmix deps.get\nmix ecto.setup\nmix phx.server\n```\n\nVisit: http://localhost:4004\n\n### Database Commands\n\n```bash\nmix ecto.create\nmix ecto.migrate\nmix ecto.reset\n```\n\n## Project Structure\n\n```\nlib/\n├── maestro/\n│   └── ops/              # Project management\n├── maestro_web/\n│   ├── components/       # Guideline viewer, etc\n│   └── live/            # Dashboard, project detail\npriv/\n├── repo/\n│   ├── migrations/\n│   └── seeds.exs\n```\n\n## Other Projects Tracked\n\n- **Ready**: Web 4000, Debugger 4008\n- **new_project**: Web 4001, Debugger 4009\n- **Calvin**: Web 4002, Debugger 4010\n- **SanJuan**: Web 4003, Debugger 4011\n- **Circle**: Web 4015, Debugger 4016\n",
    "purpose": "Know who you are - project identity, purpose, ports"
  },
  "session": "maestro_startup",
  "version": "2.0.0",
  "workflow": {
    "1_start_session": "Read this file (startup.json) - everything bundled here",
    "2_init_tracking": "mix bundles.track init maestro <branch> bootstrap",
    "3_check_task": "Read current_task.json for assigned work",
    "4_load_contextual": "If task involves another project, read their README. If task type known, load relevant bundle",
    "5_work": "Execute task, logging guideline usage as you go",
    "6_end_session": "mix bundles.track summary && mix session.capacity <used> 200000 && mix startup.build"
  }
}