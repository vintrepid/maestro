defmodule Mix.Tasks.Session.Capacity do
  @moduledoc """
  Write session capacity information to files for display.
  
  ## Usage
  
      # Write capacity files with token usage
      mix session.capacity 98515 200000
      
  This creates:
  - SESSION_CAPACITY.md - Detailed capacity information
  - SESS_CAP.md - Simple percentage (e.g., "48%")
  """
  use Mix.Task

  @shortdoc "Write session capacity information"
  
  def run([used_str, total_str]) do
    used = String.to_integer(used_str)
    total = String.to_integer(total_str)
    
    remaining = total - used
    percent_used = trunc(used / total * 100)
    percent_remaining = 100 - percent_used
    
    status = cond do
      percent_remaining >= 50 -> "HEALTHY"
      percent_remaining >= 25 -> "MODERATE"
      true -> "LOW"
    end
    
    timestamp = DateTime.utc_now() |> DateTime.to_string()
    
    detailed_content = """
    # Session Capacity Information

    **Last Updated:** #{timestamp}

    ## Current Session Statistics

    - **Total Token Budget:** #{format_number(total)} tokens
    - **Tokens Used:** #{format_number(used)} tokens
    - **Tokens Remaining:** #{format_number(remaining)} tokens
    - **Capacity Used:** #{percent_used}%
    - **Capacity Remaining:** #{percent_remaining}%

    ## Session Status

    #{status_badge(status)} **#{status}** - #{status_message(percent_remaining)}

    ## Recommendations

    #{recommendations(percent_remaining)}

    ## Notes

    This file is automatically generated by `mix session.capacity`.
    Run the command again to update with current token usage.
    """
    
    simple_content = "#{percent_used}%"
    
    File.write!("SESSION_CAPACITY.md", detailed_content)
    File.write!("SESS_CAP.md", simple_content)
    
    Mix.shell().info("‚úì Created SESSION_CAPACITY.md (detailed)")
    Mix.shell().info("‚úì Created SESS_CAP.md (#{simple_content})")
  end
  
  def run(_) do
    Mix.shell().error("Usage: mix session.capacity <tokens_used> <tokens_total>")
    Mix.shell().error("Example: mix session.capacity 98515 200000")
  end
  
  defp format_number(num) do
    num
    |> Integer.to_string()
    |> String.graphemes()
    |> Enum.reverse()
    |> Enum.chunk_every(3)
    |> Enum.join(",")
    |> String.reverse()
  end
  
  defp status_badge("HEALTHY"), do: "‚úÖ"
  defp status_badge("MODERATE"), do: "‚ö†Ô∏è"
  defp status_badge("LOW"), do: "üî¥"
  
  defp status_message(percent) when percent >= 50, do: "Over 50% capacity remaining"
  defp status_message(percent) when percent >= 25, do: "25-50% capacity remaining"
  defp status_message(_), do: "Less than 25% capacity remaining"
  
  defp recommendations(percent) when percent >= 50 do
    """
    - ‚úÖ **Continue working** - Plenty of capacity for additional tasks
    - Session is efficient and productive
    - No need to start a new session yet
    """
  end
  
  defp recommendations(percent) when percent >= 25 do
    """
    - ‚ö†Ô∏è **Monitor usage** - Moderate capacity remaining
    - Consider wrapping up current task
    - Plan to start new session soon
    """
  end
  
  defp recommendations(_) do
    """
    - üî¥ **Low capacity** - Limited tokens remaining
    - Finish current task and close session
    - Start new session for additional work
    """
  end
end
